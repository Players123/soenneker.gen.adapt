using Microsoft.CodeAnalysis;
using System.Collections.Generic;
using System.Text;

namespace Soenneker.Gen.Adapt.Emitters;

internal static class EnumEmitter
{
    public static void Emit(StringBuilder sb, List<INamedTypeSymbol> enums, NameCache names, string targetNamespace)
    {
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.CodeDom.Compiler;");
        sb.AppendLine("using System.Diagnostics.CodeAnalysis;");
        sb.AppendLine();
        sb.Append("namespace ").AppendLine(targetNamespace);
        sb.AppendLine("{");
        sb.AppendLine("\tpublic static partial class GenAdapt_EnumParsers");
        sb.AppendLine("\t{");

        for (var i = 0; i < enums.Count; i++)
        {
            INamedTypeSymbol? e = enums[i];
            string fq = names.FullyQualified(e);
            string sanitized = names.Sanitized(e);

            // gather enum member names (fields with constant value)
            List<string> members = Types.GetEnumMemberNames(e);

            sb.AppendLine("\t\t[GeneratedCode(\"Soenneker.Gen.Adapt\", \"3.0.0\")] ");
            sb.AppendLine("\t\t[ExcludeFromCodeCoverage]");
            sb.Append("\t\tinternal static ").Append(fq).Append(" Parse_").Append(sanitized).AppendLine("(string value)");
            sb.AppendLine("\t\t{");
            sb.AppendLine("\t\t\tswitch (value)");
            sb.AppendLine("\t\t\t{");
            for (var m = 0; m < members.Count; m++)
            {
                string? name = members[m];
                sb.Append("\t\t\t\tcase \"").Append(name).Append("\": return ").Append(fq).Append('.').Append(name).AppendLine(";");
            }
            sb.Append("\t\t\t\tdefault: throw new ArgumentOutOfRangeException(nameof(value), $\"Unknown enum value '{value}' for ")
                .Append(e.Name).AppendLine("\");");
            sb.AppendLine("\t\t\t}");
            sb.AppendLine("\t\t}");
            sb.AppendLine();
        }

        sb.AppendLine("\t}");
        sb.AppendLine("}");
    }
}