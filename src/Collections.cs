using System.Text;

namespace Soenneker.Gen.Adapt;

internal static class Collections
{
    public static void Emit(StringBuilder sb)
    {
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();
        sb.AppendLine("public static partial class GenAdapt_Collections");
        sb.AppendLine("{");
        // List<T> -> clone
        sb.AppendLine("\tpublic static List<TElement> Adapt<TElement>(this List<TElement> source)");
        sb.AppendLine("\t{");
        sb.AppendLine("\t\tif (source is null) throw new ArgumentNullException(nameof(source));");
        sb.AppendLine("\t\tvar result = new List<TElement>(source.Count);");
        sb.AppendLine("\t\tfor (int i = 0; i < source.Count; i++) result.Add(source[i]);");
        sb.AppendLine("\t\treturn result;");
        sb.AppendLine("\t}");
        sb.AppendLine();

        // IEnumerable<T> -> materialize (stable behavior)
        sb.AppendLine("\tpublic static IEnumerable<TElement> Adapt<TElement>(this IEnumerable<TElement> source)");
        sb.AppendLine("\t{");
        sb.AppendLine("\t\tif (source is null) throw new ArgumentNullException(nameof(source));");
        sb.AppendLine("\t\tvar list = new List<TElement>();");
        sb.AppendLine("\t\tforeach (var item in source) list.Add(item);");
        sb.AppendLine("\t\treturn list;");
        sb.AppendLine("\t}");
        sb.AppendLine();

        // Dictionary<TKey,TValue>
        sb.AppendLine("\tpublic static Dictionary<TKey, TValue> Adapt<TKey, TValue>(this Dictionary<TKey, TValue> source)");
        sb.AppendLine("\t{");
        sb.AppendLine("\t\tif (source is null) throw new ArgumentNullException(nameof(source));");
        sb.AppendLine("\t\tvar result = new Dictionary<TKey, TValue>(source.Count);");
        sb.AppendLine("\t\tforeach (var kv in source) result[kv.Key] = kv.Value;");
        sb.AppendLine("\t\treturn result;");
        sb.AppendLine("\t}");
        sb.AppendLine();

        // IDictionary<TKey,TValue>
        sb.AppendLine("\tpublic static IDictionary<TKey, TValue> Adapt<TKey, TValue>(this IDictionary<TKey, TValue> source)");
        sb.AppendLine("\t{");
        sb.AppendLine("\t\tif (source is null) throw new ArgumentNullException(nameof(source));");
        sb.AppendLine("\t\tvar result = new Dictionary<TKey, TValue>(source.Count);");
        sb.AppendLine("\t\tforeach (var kv in source) result[kv.Key] = kv.Value;");
        sb.AppendLine("\t\treturn result;");
        sb.AppendLine("\t}");
        sb.AppendLine("}");
    }
}
